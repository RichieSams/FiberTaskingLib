include(CheckCXXCompilerFlag)

# Function to add flag if compiler supports it
function(Check_And_Add_Flag)
	set(TARGET ${ARGV0})

	# Sanitize flag to become cmake variable name
	string (REPLACE "-" "_" NAME ${ARGV1})
	string (SUBSTRING ${NAME} 1 -1 NAME)
	string (FIND ${NAME} "=" EQUALS)
	string (SUBSTRING ${NAME} 0 ${EQUALS} NAME)
	CHECK_CXX_COMPILER_FLAG(${ARGV1} ${NAME})
	if (${NAME}) 
		target_compile_options(${TARGET} PRIVATE ${ARGV1})
	endif()
endfunction()

# Function to add flag if compiler supports it
# for -Wno- parameters the standard check doesn't always catch that it's not supported
# so we need to check the non-no flag first in order to check if we can apply no-
function(Check_And_Add_WNo_Flag)
	set(TARGET ${ARGV0})

	# Sanitize flag to become cmake variable name
	string (REPLACE "-" "_" NAME ${ARGV1})
	string (SUBSTRING ${NAME} 1 -1 NAME)
	string (FIND ${NAME} "=" EQUALS)
	string (SUBSTRING ${NAME} 0 ${EQUALS} NAME)
	CHECK_CXX_COMPILER_FLAG("-W${ARGV1}" ${NAME})
	if (${NAME}) 
		target_compile_options(${TARGET} PRIVATE "-Wno-${ARGV1}")
	endif()
endfunction()

function(AddCompilerFlags)
	set(TARGET ${ARGV0})

	if (("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU") OR (CMAKE_CXX_COMPILER_ID MATCHES "Clang"))
		Check_And_Add_Flag(${TARGET} -fdiagnostics-color=always)
		Check_And_Add_Flag(${TARGET} -Wall)
		Check_And_Add_Flag(${TARGET} -Wextra)
		Check_And_Add_Flag(${TARGET} -Wpedantic)
		Check_And_Add_Flag(${TARGET} -Wconversion)
		Check_And_Add_Flag(${TARGET} -Wsign-conversion)
		Check_And_Add_Flag(${TARGET} -Wcast-align)
		Check_And_Add_Flag(${TARGET} -Wcast-qual)
		# Check_And_Add_Flag(${TARGET} -Wctor-dtor-privacy) # causes issues on gcc 5/9 with catch2 under linux
		Check_And_Add_Flag(${TARGET} -Wdisabled-optimization)
		Check_And_Add_Flag(${TARGET} -Wdouble-promotion)
		Check_And_Add_Flag(${TARGET} -Wduplicated-branches)
		Check_And_Add_Flag(${TARGET} -Wduplicated-cond)
		Check_And_Add_Flag(${TARGET} -Wformat=2)
		Check_And_Add_Flag(${TARGET} -Wlogical-op)
		Check_And_Add_Flag(${TARGET} -Wmissing-include-dirs)
		Check_And_Add_Flag(${TARGET} -Wnoexcept)
		Check_And_Add_Flag(${TARGET} -Wnull-dereference)
		Check_And_Add_Flag(${TARGET} -Wold-style-cast)
		Check_And_Add_Flag(${TARGET} -Woverloaded-virtual)
		Check_And_Add_Flag(${TARGET} -Wshadow)
		Check_And_Add_Flag(${TARGET} -Wstrict-aliasing=1)
		Check_And_Add_Flag(${TARGET} -Wstrict-null-sentinel)
		Check_And_Add_Flag(${TARGET} -Wstrict-overflow=2)
		Check_And_Add_Flag(${TARGET} -Wswitch-default)
		Check_And_Add_Flag(${TARGET} -Wundef)
		Check_And_Add_Flag(${TARGET} -Wuseless-cast)
		# special handling for -Wno- flags due to gcc weirdness
		# as we have to check the reverse flag before applying the one we want
		Check_And_Add_WNo_Flag(${TARGET} unknown-pragmas)
		Check_And_Add_WNo_Flag(${TARGET} aligned-new)
		Check_And_Add_WNo_Flag(${TARGET} aligned-new)
		if(("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU") AND (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0))
			# Useless flag that hits a bunch of valid code
			Check_And_Add_WNo_Flag(${TARGET} missing-field-initializers)
		endif()
		if(FTL_WERROR)
			Check_And_Add_Flag(${TARGET} -Werror)
		endif()
	else()
		Check_And_Add_Flag(${TARGET} /W4)
		Check_And_Add_Flag(${TARGET} /wd4324)
		if(FTL_WERROR)
			Check_And_Add_Flag(${TARGET} /WX)
		endif()
	endif()
endfunction()
